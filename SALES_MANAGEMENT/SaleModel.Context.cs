//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SALES_MANAGEMENT
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SaleEntities1 : DbContext
    {
        public SaleEntities1()
            : base("name=SaleEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Order_Invoice> Order_Invoice { get; set; }
        public virtual DbSet<TBL_Cities> TBL_Cities { get; set; }
        public virtual DbSet<TBL_Countries> TBL_Countries { get; set; }
        public virtual DbSet<tbl_credentials> tbl_credentials { get; set; }
        public virtual DbSet<TBL_Currency> TBL_Currency { get; set; }
        public virtual DbSet<TBL_CurrencyForQuote> TBL_CurrencyForQuote { get; set; }
        public virtual DbSet<TBL_ForecastCategory> TBL_ForecastCategory { get; set; }
        public virtual DbSet<TBL_FreightTerms> TBL_FreightTerms { get; set; }
        public virtual DbSet<TBL_Leads> TBL_Leads { get; set; }
        public virtual DbSet<TBL_LeadSource> TBL_LeadSource { get; set; }
        public virtual DbSet<TBL_Opportunity> TBL_Opportunity { get; set; }
        public virtual DbSet<TBL_PaymentTerms> TBL_PaymentTerms { get; set; }
        public virtual DbSet<TBL_PurchaseTimeForm> TBL_PurchaseTimeForm { get; set; }
        public virtual DbSet<TBL_PurchesProcess> TBL_PurchesProcess { get; set; }
        public virtual DbSet<TBL_Quote> TBL_Quote { get; set; }
        public virtual DbSet<TBL_ShippingMethod> TBL_ShippingMethod { get; set; }
        public virtual DbSet<TBL_ShipTo> TBL_ShipTo { get; set; }
        public virtual DbSet<TBL_States> TBL_States { get; set; }
        public virtual DbSet<TBL_StatusReason> TBL_StatusReason { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
    
        public virtual int sp_credntials(string emailId, string password, string userDepartment)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userDepartmentParameter = userDepartment != null ?
                new ObjectParameter("UserDepartment", userDepartment) :
                new ObjectParameter("UserDepartment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_credntials", emailIdParameter, passwordParameter, userDepartmentParameter);
        }
    
        public virtual ObjectResult<SP_Currency_Result> SP_Currency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Currency_Result>("SP_Currency");
        }
    
        public virtual ObjectResult<sp_dropdown_Result> sp_dropdown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_dropdown_Result>("sp_dropdown");
        }
    
        public virtual ObjectResult<SP_ForecastCategory_Result> SP_ForecastCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ForecastCategory_Result>("SP_ForecastCategory");
        }
    
        public virtual ObjectResult<sp_gridview_Result> sp_gridview()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_gridview_Result>("sp_gridview");
        }
    
        public virtual int sp_insert(string firstName, string lastName, string gender, string emailAddress, string phoneNumber, string address, string photo, Nullable<long> aadharNumber, string fathersName, string maritalStatus)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var aadharNumberParameter = aadharNumber.HasValue ?
                new ObjectParameter("AadharNumber", aadharNumber) :
                new ObjectParameter("AadharNumber", typeof(long));
    
            var fathersNameParameter = fathersName != null ?
                new ObjectParameter("FathersName", fathersName) :
                new ObjectParameter("FathersName", typeof(string));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert", firstNameParameter, lastNameParameter, genderParameter, emailAddressParameter, phoneNumberParameter, addressParameter, photoParameter, aadharNumberParameter, fathersNameParameter, maritalStatusParameter);
        }
    
        public virtual int SP_Lead_Insert(string photo, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, string gender, string currentAddress, string permanentAddress, Nullable<long> mobileNumber, string emailId, Nullable<int> city, Nullable<int> state, Nullable<int> country, string title, string leadSource, Nullable<System.DateTime> meetingDate, Nullable<int> type, string jobTitle, string companyName, string companyWebsite)
        {
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var currentAddressParameter = currentAddress != null ?
                new ObjectParameter("CurrentAddress", currentAddress) :
                new ObjectParameter("CurrentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(long));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var leadSourceParameter = leadSource != null ?
                new ObjectParameter("LeadSource", leadSource) :
                new ObjectParameter("LeadSource", typeof(string));
    
            var meetingDateParameter = meetingDate.HasValue ?
                new ObjectParameter("MeetingDate", meetingDate) :
                new ObjectParameter("MeetingDate", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyWebsiteParameter = companyWebsite != null ?
                new ObjectParameter("CompanyWebsite", companyWebsite) :
                new ObjectParameter("CompanyWebsite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Lead_Insert", photoParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, genderParameter, currentAddressParameter, permanentAddressParameter, mobileNumberParameter, emailIdParameter, cityParameter, stateParameter, countryParameter, titleParameter, leadSourceParameter, meetingDateParameter, typeParameter, jobTitleParameter, companyNameParameter, companyWebsiteParameter);
        }
    
        public virtual int Sp_Login(string admin_id, string password, ObjectParameter isvalid)
        {
            var admin_idParameter = admin_id != null ?
                new ObjectParameter("Admin_id", admin_id) :
                new ObjectParameter("Admin_id", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Login", admin_idParameter, passwordParameter, isvalid);
        }
    
        public virtual int SP_Opportunity_Insert(Nullable<int> refOppId, string topic, Nullable<long> contact, string account, string purchaseTimeForm, string currency, Nullable<long> budgetAmount, string purchesProcess, string forecastCategory, string description, string currentSuitation, string custommerNeed, string proposedSolution)
        {
            var refOppIdParameter = refOppId.HasValue ?
                new ObjectParameter("RefOppId", refOppId) :
                new ObjectParameter("RefOppId", typeof(int));
    
            var topicParameter = topic != null ?
                new ObjectParameter("Topic", topic) :
                new ObjectParameter("Topic", typeof(string));
    
            var contactParameter = contact.HasValue ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(long));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var purchaseTimeFormParameter = purchaseTimeForm != null ?
                new ObjectParameter("PurchaseTimeForm", purchaseTimeForm) :
                new ObjectParameter("PurchaseTimeForm", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var budgetAmountParameter = budgetAmount.HasValue ?
                new ObjectParameter("BudgetAmount", budgetAmount) :
                new ObjectParameter("BudgetAmount", typeof(long));
    
            var purchesProcessParameter = purchesProcess != null ?
                new ObjectParameter("PurchesProcess", purchesProcess) :
                new ObjectParameter("PurchesProcess", typeof(string));
    
            var forecastCategoryParameter = forecastCategory != null ?
                new ObjectParameter("ForecastCategory", forecastCategory) :
                new ObjectParameter("ForecastCategory", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var currentSuitationParameter = currentSuitation != null ?
                new ObjectParameter("CurrentSuitation", currentSuitation) :
                new ObjectParameter("CurrentSuitation", typeof(string));
    
            var custommerNeedParameter = custommerNeed != null ?
                new ObjectParameter("CustommerNeed", custommerNeed) :
                new ObjectParameter("CustommerNeed", typeof(string));
    
            var proposedSolutionParameter = proposedSolution != null ?
                new ObjectParameter("ProposedSolution", proposedSolution) :
                new ObjectParameter("ProposedSolution", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Opportunity_Insert", refOppIdParameter, topicParameter, contactParameter, accountParameter, purchaseTimeFormParameter, currencyParameter, budgetAmountParameter, purchesProcessParameter, forecastCategoryParameter, descriptionParameter, currentSuitationParameter, custommerNeedParameter, proposedSolutionParameter);
        }
    
        public virtual ObjectResult<SP_Opportunity_SelectAllbyId_Result> SP_Opportunity_SelectAllbyId(Nullable<int> refOppId)
        {
            var refOppIdParameter = refOppId.HasValue ?
                new ObjectParameter("RefOppId", refOppId) :
                new ObjectParameter("RefOppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Opportunity_SelectAllbyId_Result>("SP_Opportunity_SelectAllbyId", refOppIdParameter);
        }
    
        public virtual int SP_Opportunity_Update(string topic, Nullable<long> contact, string account, Nullable<long> budgetAmount, string description, string currentSuitation, string custommerNeed, string proposedSolution, Nullable<int> purchaseTimeForm, Nullable<int> currency, Nullable<int> forecastCategory, Nullable<int> purchesProcess, Nullable<int> refOppId)
        {
            var topicParameter = topic != null ?
                new ObjectParameter("Topic", topic) :
                new ObjectParameter("Topic", typeof(string));
    
            var contactParameter = contact.HasValue ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(long));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var budgetAmountParameter = budgetAmount.HasValue ?
                new ObjectParameter("BudgetAmount", budgetAmount) :
                new ObjectParameter("BudgetAmount", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var currentSuitationParameter = currentSuitation != null ?
                new ObjectParameter("CurrentSuitation", currentSuitation) :
                new ObjectParameter("CurrentSuitation", typeof(string));
    
            var custommerNeedParameter = custommerNeed != null ?
                new ObjectParameter("CustommerNeed", custommerNeed) :
                new ObjectParameter("CustommerNeed", typeof(string));
    
            var proposedSolutionParameter = proposedSolution != null ?
                new ObjectParameter("ProposedSolution", proposedSolution) :
                new ObjectParameter("ProposedSolution", typeof(string));
    
            var purchaseTimeFormParameter = purchaseTimeForm.HasValue ?
                new ObjectParameter("PurchaseTimeForm", purchaseTimeForm) :
                new ObjectParameter("PurchaseTimeForm", typeof(int));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(int));
    
            var forecastCategoryParameter = forecastCategory.HasValue ?
                new ObjectParameter("ForecastCategory", forecastCategory) :
                new ObjectParameter("ForecastCategory", typeof(int));
    
            var purchesProcessParameter = purchesProcess.HasValue ?
                new ObjectParameter("PurchesProcess", purchesProcess) :
                new ObjectParameter("PurchesProcess", typeof(int));
    
            var refOppIdParameter = refOppId.HasValue ?
                new ObjectParameter("RefOppId", refOppId) :
                new ObjectParameter("RefOppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Opportunity_Update", topicParameter, contactParameter, accountParameter, budgetAmountParameter, descriptionParameter, currentSuitationParameter, custommerNeedParameter, proposedSolutionParameter, purchaseTimeFormParameter, currencyParameter, forecastCategoryParameter, purchesProcessParameter, refOppIdParameter);
        }
    
        public virtual int SP_OpportunityQualify_Update(Nullable<int> refOppId)
        {
            var refOppIdParameter = refOppId.HasValue ?
                new ObjectParameter("RefOppId", refOppId) :
                new ObjectParameter("RefOppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_OpportunityQualify_Update", refOppIdParameter);
        }
    
        public virtual int SP_Opprtunity_Delete(Nullable<int> refOppId)
        {
            var refOppIdParameter = refOppId.HasValue ?
                new ObjectParameter("RefOppId", refOppId) :
                new ObjectParameter("RefOppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Opprtunity_Delete", refOppIdParameter);
        }
    
        public virtual ObjectResult<SP_Order_Invoice_SelectAll_Result> SP_Order_Invoice_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Order_Invoice_SelectAll_Result>("SP_Order_Invoice_SelectAll");
        }
    
        public virtual int SP_OrderInvoice_Insert(Nullable<int> refOrder_InvoiceId, string name, string emailId, Nullable<int> currency, string opportunity, string priceList, string priceLocked, Nullable<System.DateTime> requestedDelivery, Nullable<System.DateTime> dateFullfilled, Nullable<int> shippingMethod, Nullable<int> paymentTerms, Nullable<int> freightTerms, string billToStreet, string billToCity, string billToState, Nullable<long> billingPostalCode, string billToCountry, string shipToStreet, string shipToCity, string shipToState, Nullable<long> shipingPostalCodes, string shipToCountry, string potentialCustomer, string description)
        {
            var refOrder_InvoiceIdParameter = refOrder_InvoiceId.HasValue ?
                new ObjectParameter("RefOrder_InvoiceId", refOrder_InvoiceId) :
                new ObjectParameter("RefOrder_InvoiceId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(int));
    
            var opportunityParameter = opportunity != null ?
                new ObjectParameter("Opportunity", opportunity) :
                new ObjectParameter("Opportunity", typeof(string));
    
            var priceListParameter = priceList != null ?
                new ObjectParameter("PriceList", priceList) :
                new ObjectParameter("PriceList", typeof(string));
    
            var priceLockedParameter = priceLocked != null ?
                new ObjectParameter("PriceLocked", priceLocked) :
                new ObjectParameter("PriceLocked", typeof(string));
    
            var requestedDeliveryParameter = requestedDelivery.HasValue ?
                new ObjectParameter("RequestedDelivery", requestedDelivery) :
                new ObjectParameter("RequestedDelivery", typeof(System.DateTime));
    
            var dateFullfilledParameter = dateFullfilled.HasValue ?
                new ObjectParameter("DateFullfilled", dateFullfilled) :
                new ObjectParameter("DateFullfilled", typeof(System.DateTime));
    
            var shippingMethodParameter = shippingMethod.HasValue ?
                new ObjectParameter("ShippingMethod", shippingMethod) :
                new ObjectParameter("ShippingMethod", typeof(int));
    
            var paymentTermsParameter = paymentTerms.HasValue ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(int));
    
            var freightTermsParameter = freightTerms.HasValue ?
                new ObjectParameter("FreightTerms", freightTerms) :
                new ObjectParameter("FreightTerms", typeof(int));
    
            var billToStreetParameter = billToStreet != null ?
                new ObjectParameter("BillToStreet", billToStreet) :
                new ObjectParameter("BillToStreet", typeof(string));
    
            var billToCityParameter = billToCity != null ?
                new ObjectParameter("BillToCity", billToCity) :
                new ObjectParameter("BillToCity", typeof(string));
    
            var billToStateParameter = billToState != null ?
                new ObjectParameter("BillToState", billToState) :
                new ObjectParameter("BillToState", typeof(string));
    
            var billingPostalCodeParameter = billingPostalCode.HasValue ?
                new ObjectParameter("BillingPostalCode", billingPostalCode) :
                new ObjectParameter("BillingPostalCode", typeof(long));
    
            var billToCountryParameter = billToCountry != null ?
                new ObjectParameter("BillToCountry", billToCountry) :
                new ObjectParameter("BillToCountry", typeof(string));
    
            var shipToStreetParameter = shipToStreet != null ?
                new ObjectParameter("ShipToStreet", shipToStreet) :
                new ObjectParameter("ShipToStreet", typeof(string));
    
            var shipToCityParameter = shipToCity != null ?
                new ObjectParameter("ShipToCity", shipToCity) :
                new ObjectParameter("ShipToCity", typeof(string));
    
            var shipToStateParameter = shipToState != null ?
                new ObjectParameter("ShipToState", shipToState) :
                new ObjectParameter("ShipToState", typeof(string));
    
            var shipingPostalCodesParameter = shipingPostalCodes.HasValue ?
                new ObjectParameter("ShipingPostalCodes", shipingPostalCodes) :
                new ObjectParameter("ShipingPostalCodes", typeof(long));
    
            var shipToCountryParameter = shipToCountry != null ?
                new ObjectParameter("ShipToCountry", shipToCountry) :
                new ObjectParameter("ShipToCountry", typeof(string));
    
            var potentialCustomerParameter = potentialCustomer != null ?
                new ObjectParameter("PotentialCustomer", potentialCustomer) :
                new ObjectParameter("PotentialCustomer", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_OrderInvoice_Insert", refOrder_InvoiceIdParameter, nameParameter, emailIdParameter, currencyParameter, opportunityParameter, priceListParameter, priceLockedParameter, requestedDeliveryParameter, dateFullfilledParameter, shippingMethodParameter, paymentTermsParameter, freightTermsParameter, billToStreetParameter, billToCityParameter, billToStateParameter, billingPostalCodeParameter, billToCountryParameter, shipToStreetParameter, shipToCityParameter, shipToStateParameter, shipingPostalCodesParameter, shipToCountryParameter, potentialCustomerParameter, descriptionParameter);
        }
    
        public virtual int sp_password_update(string password, string emailId)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_password_update", passwordParameter, emailIdParameter);
        }
    
        public virtual ObjectResult<SP_PurchaseTimeForm_Result> SP_PurchaseTimeForm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PurchaseTimeForm_Result>("SP_PurchaseTimeForm");
        }
    
        public virtual ObjectResult<SP_PurchesProcess_Result> SP_PurchesProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PurchesProcess_Result>("SP_PurchesProcess");
        }
    
        public virtual int SP_Qialify_Update(Nullable<int> leadId)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Qialify_Update", leadIdParameter);
        }
    
        public virtual ObjectResult<SP_QualifiedQuote_SelectAll_Result> SP_QualifiedQuote_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_QualifiedQuote_SelectAll_Result>("SP_QualifiedQuote_SelectAll");
        }
    
        public virtual int SP_QuortesQialify_Update(Nullable<int> refQuoteId)
        {
            var refQuoteIdParameter = refQuoteId.HasValue ?
                new ObjectParameter("RefQuoteId", refQuoteId) :
                new ObjectParameter("RefQuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_QuortesQialify_Update", refQuoteIdParameter);
        }
    
        public virtual ObjectResult<SP_Quote_DropDownForQuoteCurrency_Result> SP_Quote_DropDownForQuoteCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_DropDownForQuoteCurrency_Result>("SP_Quote_DropDownForQuoteCurrency");
        }
    
        public virtual ObjectResult<SP_Quote_DropDownFreightTerms_Result> SP_Quote_DropDownFreightTerms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_DropDownFreightTerms_Result>("SP_Quote_DropDownFreightTerms");
        }
    
        public virtual ObjectResult<SP_Quote_DropDownPaymentTerms_Result> SP_Quote_DropDownPaymentTerms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_DropDownPaymentTerms_Result>("SP_Quote_DropDownPaymentTerms");
        }
    
        public virtual ObjectResult<SP_Quote_DropDownShippingMethod_Result> SP_Quote_DropDownShippingMethod()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_DropDownShippingMethod_Result>("SP_Quote_DropDownShippingMethod");
        }
    
        public virtual ObjectResult<SP_Quote_DropDownShipTo_Result> SP_Quote_DropDownShipTo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_DropDownShipTo_Result>("SP_Quote_DropDownShipTo");
        }
    
        public virtual ObjectResult<SP_Quote_DropDownStatusReason_Result> SP_Quote_DropDownStatusReason()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_DropDownStatusReason_Result>("SP_Quote_DropDownStatusReason");
        }
    
        public virtual int SP_Quote_Insert(Nullable<int> refQuoteId, string name, Nullable<int> currency, string opportunity, string priceList, Nullable<int> shippingMethod, Nullable<int> paymentTerms, Nullable<int> freightTerms, string billToStreet, string billToCity, string billToState, Nullable<long> billingPostalCode, string billToCountry, Nullable<int> shipTo, string shipToStreet, string shipToCity, string shipToState, Nullable<long> shipingPostalCodes, string shipToCountry, string potentialCustomer, Nullable<int> statusReason, string description, Nullable<System.DateTime> quoteExpiresOn)
        {
            var refQuoteIdParameter = refQuoteId.HasValue ?
                new ObjectParameter("RefQuoteId", refQuoteId) :
                new ObjectParameter("RefQuoteId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(int));
    
            var opportunityParameter = opportunity != null ?
                new ObjectParameter("Opportunity", opportunity) :
                new ObjectParameter("Opportunity", typeof(string));
    
            var priceListParameter = priceList != null ?
                new ObjectParameter("PriceList", priceList) :
                new ObjectParameter("PriceList", typeof(string));
    
            var shippingMethodParameter = shippingMethod.HasValue ?
                new ObjectParameter("ShippingMethod", shippingMethod) :
                new ObjectParameter("ShippingMethod", typeof(int));
    
            var paymentTermsParameter = paymentTerms.HasValue ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(int));
    
            var freightTermsParameter = freightTerms.HasValue ?
                new ObjectParameter("FreightTerms", freightTerms) :
                new ObjectParameter("FreightTerms", typeof(int));
    
            var billToStreetParameter = billToStreet != null ?
                new ObjectParameter("BillToStreet", billToStreet) :
                new ObjectParameter("BillToStreet", typeof(string));
    
            var billToCityParameter = billToCity != null ?
                new ObjectParameter("BillToCity", billToCity) :
                new ObjectParameter("BillToCity", typeof(string));
    
            var billToStateParameter = billToState != null ?
                new ObjectParameter("BillToState", billToState) :
                new ObjectParameter("BillToState", typeof(string));
    
            var billingPostalCodeParameter = billingPostalCode.HasValue ?
                new ObjectParameter("BillingPostalCode", billingPostalCode) :
                new ObjectParameter("BillingPostalCode", typeof(long));
    
            var billToCountryParameter = billToCountry != null ?
                new ObjectParameter("BillToCountry", billToCountry) :
                new ObjectParameter("BillToCountry", typeof(string));
    
            var shipToParameter = shipTo.HasValue ?
                new ObjectParameter("ShipTo", shipTo) :
                new ObjectParameter("ShipTo", typeof(int));
    
            var shipToStreetParameter = shipToStreet != null ?
                new ObjectParameter("ShipToStreet", shipToStreet) :
                new ObjectParameter("ShipToStreet", typeof(string));
    
            var shipToCityParameter = shipToCity != null ?
                new ObjectParameter("ShipToCity", shipToCity) :
                new ObjectParameter("ShipToCity", typeof(string));
    
            var shipToStateParameter = shipToState != null ?
                new ObjectParameter("ShipToState", shipToState) :
                new ObjectParameter("ShipToState", typeof(string));
    
            var shipingPostalCodesParameter = shipingPostalCodes.HasValue ?
                new ObjectParameter("ShipingPostalCodes", shipingPostalCodes) :
                new ObjectParameter("ShipingPostalCodes", typeof(long));
    
            var shipToCountryParameter = shipToCountry != null ?
                new ObjectParameter("ShipToCountry", shipToCountry) :
                new ObjectParameter("ShipToCountry", typeof(string));
    
            var potentialCustomerParameter = potentialCustomer != null ?
                new ObjectParameter("PotentialCustomer", potentialCustomer) :
                new ObjectParameter("PotentialCustomer", typeof(string));
    
            var statusReasonParameter = statusReason.HasValue ?
                new ObjectParameter("StatusReason", statusReason) :
                new ObjectParameter("StatusReason", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quoteExpiresOnParameter = quoteExpiresOn.HasValue ?
                new ObjectParameter("QuoteExpiresOn", quoteExpiresOn) :
                new ObjectParameter("QuoteExpiresOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Quote_Insert", refQuoteIdParameter, nameParameter, currencyParameter, opportunityParameter, priceListParameter, shippingMethodParameter, paymentTermsParameter, freightTermsParameter, billToStreetParameter, billToCityParameter, billToStateParameter, billingPostalCodeParameter, billToCountryParameter, shipToParameter, shipToStreetParameter, shipToCityParameter, shipToStateParameter, shipingPostalCodesParameter, shipToCountryParameter, potentialCustomerParameter, statusReasonParameter, descriptionParameter, quoteExpiresOnParameter);
        }
    
        public virtual ObjectResult<SP_Quote_SelectAll_Result> SP_Quote_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_SelectAll_Result>("SP_Quote_SelectAll");
        }
    
        public virtual ObjectResult<SP_Quotes_SelectAllbyId_Result> SP_Quotes_SelectAllbyId(Nullable<int> refQuoteId)
        {
            var refQuoteIdParameter = refQuoteId.HasValue ?
                new ObjectParameter("RefQuoteId", refQuoteId) :
                new ObjectParameter("RefQuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quotes_SelectAllbyId_Result>("SP_Quotes_SelectAllbyId", refQuoteIdParameter);
        }
    
        public virtual ObjectResult<string> sp_remote_email()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_remote_email");
        }
    
        public virtual ObjectResult<SP_SALES_MANAGEMENT_Lead_Type_Result> SP_SALES_MANAGEMENT_Lead_Type()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SALES_MANAGEMENT_Lead_Type_Result>("SP_SALES_MANAGEMENT_Lead_Type");
        }
    
        public virtual ObjectResult<sp_select_department_Result> sp_select_department()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_department_Result>("sp_select_department");
        }
    
        public virtual ObjectResult<SP_SelectAll_OpportunityQualify_Result> SP_SelectAll_OpportunityQualify()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAll_OpportunityQualify_Result>("SP_SelectAll_OpportunityQualify");
        }
    
        public virtual ObjectResult<SP_SelectAll_Opprtunity_Result> SP_SelectAll_Opprtunity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAll_Opprtunity_Result>("SP_SelectAll_Opprtunity");
        }
    
        public virtual ObjectResult<sp_selectcredentials_Result> sp_selectcredentials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_selectcredentials_Result>("sp_selectcredentials");
        }
    
        public virtual ObjectResult<UserLogin_Result> UserLogin(string emailid, string password)
        {
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserLogin_Result>("UserLogin", emailidParameter, passwordParameter);
        }
    
        public virtual int USP_Quortes_Delete(Nullable<int> refQuoteId)
        {
            var refQuoteIdParameter = refQuoteId.HasValue ?
                new ObjectParameter("RefQuoteId", refQuoteId) :
                new ObjectParameter("RefQuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Quortes_Delete", refQuoteIdParameter);
        }
    
        public virtual int USP_SALES_MANAGEMENT_Delete(Nullable<int> leadId)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SALES_MANAGEMENT_Delete", leadIdParameter);
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_FilterByCityName_Result> USP_SALES_MANAGEMENT_FilterByCityName(Nullable<long> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_FilterByCityName_Result>("USP_SALES_MANAGEMENT_FilterByCityName", stateIdParameter);
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_FilterByCountryName_Result> USP_SALES_MANAGEMENT_FilterByCountryName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_FilterByCountryName_Result>("USP_SALES_MANAGEMENT_FilterByCountryName");
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_FilterByStateName_Result> USP_SALES_MANAGEMENT_FilterByStateName(Nullable<long> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_FilterByStateName_Result>("USP_SALES_MANAGEMENT_FilterByStateName", countryIdParameter);
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_Op_SelectAll_Result> USP_SALES_MANAGEMENT_Op_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_Op_SelectAll_Result>("USP_SALES_MANAGEMENT_Op_SelectAll");
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_Select_Result> USP_SALES_MANAGEMENT_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_Select_Result>("USP_SALES_MANAGEMENT_Select");
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_SelectAll_Result> USP_SALES_MANAGEMENT_SelectAll(string sortingCol, string sortType)
        {
            var sortingColParameter = sortingCol != null ?
                new ObjectParameter("SortingCol", sortingCol) :
                new ObjectParameter("SortingCol", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_SelectAll_Result>("USP_SALES_MANAGEMENT_SelectAll", sortingColParameter, sortTypeParameter);
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_SelectAllbyId_Result> USP_SALES_MANAGEMENT_SelectAllbyId(Nullable<int> leadId)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_SelectAllbyId_Result>("USP_SALES_MANAGEMENT_SelectAllbyId", leadIdParameter);
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_SelectAllCityName_Result> USP_SALES_MANAGEMENT_SelectAllCityName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_SelectAllCityName_Result>("USP_SALES_MANAGEMENT_SelectAllCityName");
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_SelectAllLeadSource_Result> USP_SALES_MANAGEMENT_SelectAllLeadSource()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_SelectAllLeadSource_Result>("USP_SALES_MANAGEMENT_SelectAllLeadSource");
        }
    
        public virtual ObjectResult<USP_SALES_MANAGEMENT_SelectAllStateName_Result> USP_SALES_MANAGEMENT_SelectAllStateName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SALES_MANAGEMENT_SelectAllStateName_Result>("USP_SALES_MANAGEMENT_SelectAllStateName");
        }
    
        public virtual int USP_SALES_MANAGEMENT_Update(Nullable<int> leadId, string photo, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, string gender, string currentAddress, string permanentAddress, Nullable<long> mobileNumber, string emailId, Nullable<int> city, Nullable<int> state, Nullable<int> country, string title, string leadSource, Nullable<System.DateTime> meetingDate, Nullable<int> type, string jobTitle, string companyWebsite, string companyName)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var currentAddressParameter = currentAddress != null ?
                new ObjectParameter("CurrentAddress", currentAddress) :
                new ObjectParameter("CurrentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(long));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var leadSourceParameter = leadSource != null ?
                new ObjectParameter("LeadSource", leadSource) :
                new ObjectParameter("LeadSource", typeof(string));
    
            var meetingDateParameter = meetingDate.HasValue ?
                new ObjectParameter("MeetingDate", meetingDate) :
                new ObjectParameter("MeetingDate", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var companyWebsiteParameter = companyWebsite != null ?
                new ObjectParameter("CompanyWebsite", companyWebsite) :
                new ObjectParameter("CompanyWebsite", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SALES_MANAGEMENT_Update", leadIdParameter, photoParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, genderParameter, currentAddressParameter, permanentAddressParameter, mobileNumberParameter, emailIdParameter, cityParameter, stateParameter, countryParameter, titleParameter, leadSourceParameter, meetingDateParameter, typeParameter, jobTitleParameter, companyWebsiteParameter, companyNameParameter);
        }
    }
}
